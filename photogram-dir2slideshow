#!/usr/bin/python
######################################################################
##                
## Copyright (C) 2008,  Goedson Teixeira Paixao
##                
## This program is free software; you can redistribute it and/or
## modify it under the terms of the GNU General Public License
## as published by the Free Software Foundation; either version 3
## of the License, or (at your option) any later version.
## 
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
## 02110-1301, USA.
##                
## Filename:      photogram-dir2slideshow
## Author:        Goedson Teixeira Paixao <goedson@debian.org>
## Description:   Converts a set of pictures contained in a directory
##                into a slideshow using random transitions from the
##                available set of registered transitions.
##                
## Created at:    Fri Dec  5 17:25:34 2008
## Modified at:   Thu Dec 18 22:31:46 2008
## Modified by:   Goedson Teixeira Paixao <goedson@debian.org>
######################################################################

import Image
import sys
import glob
import os
import random
from optparse import OptionParser

from photogram import transitions
from photogram.utility import ImageLoader

def save_image(output_dir, img, frame_number):
    outfilename = os.path.join(output_dir,'img%06d.png' % frame_number)
    img.save(outfilename)
    print 'Saved "%s" ' % outfilename

def transition(image_loader, file1, file2, output_dir, frame_number):
    img1 = image_loader.load_image(file1)
    img2 = image_loader.load_image(file2)

    transition_name = random.choice(transitions.factories.keys())

    print transition_name
    t = transitions.factories[transition_name].create_transition(initial_frame=img1, final_frame=img2, bgcolor=(0,0,0))
    for img in t.render(25):
        save_image(output_dir, img, frame_number)
        frame_number += 1

    return frame_number,img

if __name__=='__main__':


    parser = OptionParser()

    parser.add_option('--inputdir',
                      type='string',
                      dest='input_directory',
                      help='Defines the directory with the photos to be used in the slideshow')

    parser.add_option('--outputdir',
                      type='string',
                      dest='output_directory',
                      help='Defines the directory where the .png frames should be saved')

    (options, args) = parser.parse_args()

    if (not options.input_directory) or (not options.output_directory):
        parser.print_help()
        sys.exit(1)

    input_dir = os.path.expanduser(options.input_directory)
    output_dir = os.path.expanduser(options.output_directory)

    # List all files contained in the input directory checking
    # if they are valid images.
    image_files = [None]
    for filename in glob.glob(os.path.join(input_dir, '*')):
        try:
            img = Image.open(filename)
            image_files.append(filename)
        except:
            pass
    image_files.append(None)

    if len(image_files) < 3:
        sys.stderr.write('There are no image files in %s' % input_dir)
        sys.exit(1)

    current_frame = 0

    dvd_size = (720,576)
    black=(0,0,0)

    image_loader = ImageLoader(dvd_size, black)

    for i in range(len(image_files)-1):
        current_frame,img = transition(image_loader, image_files[i],image_files[i+1],output_dir,current_frame)
        print 'Transition from "%s" to "%s" completed' % (image_files[i],image_files[i+1])
        for j in range(25):
            save_image(output_dir, img, current_frame)
            current_frame += 1
